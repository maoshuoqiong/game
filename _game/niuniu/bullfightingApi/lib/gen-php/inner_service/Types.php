<?php
namespace inner_service;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class QQLoginParam {
  static $_TSPEC;

  public $openID = null;
  public $openKey = null;
  public $payToken = null;
  public $pf = null;
  public $pfKey = null;
  public $clientIP = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'openKey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'payToken',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pf',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pfKey',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientIP',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openID'])) {
        $this->openID = $vals['openID'];
      }
      if (isset($vals['openKey'])) {
        $this->openKey = $vals['openKey'];
      }
      if (isset($vals['payToken'])) {
        $this->payToken = $vals['payToken'];
      }
      if (isset($vals['pf'])) {
        $this->pf = $vals['pf'];
      }
      if (isset($vals['pfKey'])) {
        $this->pfKey = $vals['pfKey'];
      }
      if (isset($vals['clientIP'])) {
        $this->clientIP = $vals['clientIP'];
      }
    }
  }

  public function getName() {
    return 'QQLoginParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pfKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QQLoginParam');
    if ($this->openID !== null) {
      $xfer += $output->writeFieldBegin('openID', TType::STRING, 1);
      $xfer += $output->writeString($this->openID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openKey !== null) {
      $xfer += $output->writeFieldBegin('openKey', TType::STRING, 2);
      $xfer += $output->writeString($this->openKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payToken !== null) {
      $xfer += $output->writeFieldBegin('payToken', TType::STRING, 3);
      $xfer += $output->writeString($this->payToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pf !== null) {
      $xfer += $output->writeFieldBegin('pf', TType::STRING, 4);
      $xfer += $output->writeString($this->pf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pfKey !== null) {
      $xfer += $output->writeFieldBegin('pfKey', TType::STRING, 5);
      $xfer += $output->writeString($this->pfKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientIP !== null) {
      $xfer += $output->writeFieldBegin('clientIP', TType::STRING, 6);
      $xfer += $output->writeString($this->clientIP);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WeChatCheckTokenParam {
  static $_TSPEC;

  public $openID = null;
  public $openKey = null;
  public $pf = null;
  public $pfKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'openKey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pf',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pfKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openID'])) {
        $this->openID = $vals['openID'];
      }
      if (isset($vals['openKey'])) {
        $this->openKey = $vals['openKey'];
      }
      if (isset($vals['pf'])) {
        $this->pf = $vals['pf'];
      }
      if (isset($vals['pfKey'])) {
        $this->pfKey = $vals['pfKey'];
      }
    }
  }

  public function getName() {
    return 'WeChatCheckTokenParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pfKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeChatCheckTokenParam');
    if ($this->openID !== null) {
      $xfer += $output->writeFieldBegin('openID', TType::STRING, 1);
      $xfer += $output->writeString($this->openID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openKey !== null) {
      $xfer += $output->writeFieldBegin('openKey', TType::STRING, 2);
      $xfer += $output->writeString($this->openKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pf !== null) {
      $xfer += $output->writeFieldBegin('pf', TType::STRING, 3);
      $xfer += $output->writeString($this->pf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pfKey !== null) {
      $xfer += $output->writeFieldBegin('pfKey', TType::STRING, 4);
      $xfer += $output->writeString($this->pfKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WeChatRefreshTokenParam {
  static $_TSPEC;

  public $openID = null;
  public $openKey = null;
  public $pf = null;
  public $pfKey = null;
  public $refreshToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'openKey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pf',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pfKey',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'refreshToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openID'])) {
        $this->openID = $vals['openID'];
      }
      if (isset($vals['openKey'])) {
        $this->openKey = $vals['openKey'];
      }
      if (isset($vals['pf'])) {
        $this->pf = $vals['pf'];
      }
      if (isset($vals['pfKey'])) {
        $this->pfKey = $vals['pfKey'];
      }
      if (isset($vals['refreshToken'])) {
        $this->refreshToken = $vals['refreshToken'];
      }
    }
  }

  public function getName() {
    return 'WeChatRefreshTokenParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pfKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refreshToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeChatRefreshTokenParam');
    if ($this->openID !== null) {
      $xfer += $output->writeFieldBegin('openID', TType::STRING, 1);
      $xfer += $output->writeString($this->openID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openKey !== null) {
      $xfer += $output->writeFieldBegin('openKey', TType::STRING, 2);
      $xfer += $output->writeString($this->openKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pf !== null) {
      $xfer += $output->writeFieldBegin('pf', TType::STRING, 3);
      $xfer += $output->writeString($this->pf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pfKey !== null) {
      $xfer += $output->writeFieldBegin('pfKey', TType::STRING, 4);
      $xfer += $output->writeString($this->pfKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refreshToken !== null) {
      $xfer += $output->writeFieldBegin('refreshToken', TType::STRING, 5);
      $xfer += $output->writeString($this->refreshToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WeChatRefreshTokenResponse {
  static $_TSPEC;

  public $errorCode = null;
  public $accessToken = null;
  public $refreshToken = null;
  public $tokenExpireTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessToken',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'refreshToken',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tokenExpireTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['accessToken'])) {
        $this->accessToken = $vals['accessToken'];
      }
      if (isset($vals['refreshToken'])) {
        $this->refreshToken = $vals['refreshToken'];
      }
      if (isset($vals['tokenExpireTime'])) {
        $this->tokenExpireTime = $vals['tokenExpireTime'];
      }
    }
  }

  public function getName() {
    return 'WeChatRefreshTokenResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refreshToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tokenExpireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeChatRefreshTokenResponse');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessToken !== null) {
      $xfer += $output->writeFieldBegin('accessToken', TType::STRING, 2);
      $xfer += $output->writeString($this->accessToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refreshToken !== null) {
      $xfer += $output->writeFieldBegin('refreshToken', TType::STRING, 3);
      $xfer += $output->writeString($this->refreshToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenExpireTime !== null) {
      $xfer += $output->writeFieldBegin('tokenExpireTime', TType::I64, 4);
      $xfer += $output->writeI64($this->tokenExpireTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryGameCoinsParam {
  static $_TSPEC;

  public $accountType = null;
  public $openID = null;
  public $openKey = null;
  public $payToken = null;
  public $pf = null;
  public $pfKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'openID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'openKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'payToken',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pf',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pfKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountType'])) {
        $this->accountType = $vals['accountType'];
      }
      if (isset($vals['openID'])) {
        $this->openID = $vals['openID'];
      }
      if (isset($vals['openKey'])) {
        $this->openKey = $vals['openKey'];
      }
      if (isset($vals['payToken'])) {
        $this->payToken = $vals['payToken'];
      }
      if (isset($vals['pf'])) {
        $this->pf = $vals['pf'];
      }
      if (isset($vals['pfKey'])) {
        $this->pfKey = $vals['pfKey'];
      }
    }
  }

  public function getName() {
    return 'QueryGameCoinsParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->accountType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pfKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryGameCoinsParam');
    if ($this->accountType !== null) {
      $xfer += $output->writeFieldBegin('accountType', TType::I32, 1);
      $xfer += $output->writeI32($this->accountType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openID !== null) {
      $xfer += $output->writeFieldBegin('openID', TType::STRING, 2);
      $xfer += $output->writeString($this->openID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openKey !== null) {
      $xfer += $output->writeFieldBegin('openKey', TType::STRING, 3);
      $xfer += $output->writeString($this->openKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payToken !== null) {
      $xfer += $output->writeFieldBegin('payToken', TType::STRING, 4);
      $xfer += $output->writeString($this->payToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pf !== null) {
      $xfer += $output->writeFieldBegin('pf', TType::STRING, 5);
      $xfer += $output->writeString($this->pf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pfKey !== null) {
      $xfer += $output->writeFieldBegin('pfKey', TType::STRING, 6);
      $xfer += $output->writeString($this->pfKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryGameCoinsResponse {
  static $_TSPEC;

  public $errorCode = null;
  public $gameCoins = null;
  public $totalConsume = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gameCoins',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'totalConsume',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['gameCoins'])) {
        $this->gameCoins = $vals['gameCoins'];
      }
      if (isset($vals['totalConsume'])) {
        $this->totalConsume = $vals['totalConsume'];
      }
    }
  }

  public function getName() {
    return 'QueryGameCoinsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gameCoins);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalConsume);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryGameCoinsResponse');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCoins !== null) {
      $xfer += $output->writeFieldBegin('gameCoins', TType::I64, 2);
      $xfer += $output->writeI64($this->gameCoins);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalConsume !== null) {
      $xfer += $output->writeFieldBegin('totalConsume', TType::I64, 3);
      $xfer += $output->writeI64($this->totalConsume);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PayGameCoinsParam {
  static $_TSPEC;

  public $accountType = null;
  public $openID = null;
  public $openKey = null;
  public $payToken = null;
  public $pf = null;
  public $pfKey = null;
  public $gameCoins = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'openID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'openKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'payToken',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pf',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pfKey',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'gameCoins',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountType'])) {
        $this->accountType = $vals['accountType'];
      }
      if (isset($vals['openID'])) {
        $this->openID = $vals['openID'];
      }
      if (isset($vals['openKey'])) {
        $this->openKey = $vals['openKey'];
      }
      if (isset($vals['payToken'])) {
        $this->payToken = $vals['payToken'];
      }
      if (isset($vals['pf'])) {
        $this->pf = $vals['pf'];
      }
      if (isset($vals['pfKey'])) {
        $this->pfKey = $vals['pfKey'];
      }
      if (isset($vals['gameCoins'])) {
        $this->gameCoins = $vals['gameCoins'];
      }
    }
  }

  public function getName() {
    return 'PayGameCoinsParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->accountType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pfKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gameCoins);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayGameCoinsParam');
    if ($this->accountType !== null) {
      $xfer += $output->writeFieldBegin('accountType', TType::I32, 1);
      $xfer += $output->writeI32($this->accountType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openID !== null) {
      $xfer += $output->writeFieldBegin('openID', TType::STRING, 2);
      $xfer += $output->writeString($this->openID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openKey !== null) {
      $xfer += $output->writeFieldBegin('openKey', TType::STRING, 3);
      $xfer += $output->writeString($this->openKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payToken !== null) {
      $xfer += $output->writeFieldBegin('payToken', TType::STRING, 4);
      $xfer += $output->writeString($this->payToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pf !== null) {
      $xfer += $output->writeFieldBegin('pf', TType::STRING, 5);
      $xfer += $output->writeString($this->pf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pfKey !== null) {
      $xfer += $output->writeFieldBegin('pfKey', TType::STRING, 6);
      $xfer += $output->writeString($this->pfKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCoins !== null) {
      $xfer += $output->writeFieldBegin('gameCoins', TType::I64, 7);
      $xfer += $output->writeI64($this->gameCoins);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PayGameCoinsResponse {
  static $_TSPEC;

  public $errorCode = null;
  public $billno = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'billno',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['billno'])) {
        $this->billno = $vals['billno'];
      }
    }
  }

  public function getName() {
    return 'PayGameCoinsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->billno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayGameCoinsResponse');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->billno !== null) {
      $xfer += $output->writeFieldBegin('billno', TType::STRING, 2);
      $xfer += $output->writeString($this->billno);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CancelPayParam {
  static $_TSPEC;

  public $accountType = null;
  public $openID = null;
  public $openKey = null;
  public $payToken = null;
  public $pf = null;
  public $pfKey = null;
  public $billno = null;
  public $gameCoins = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'openID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'openKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'payToken',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pf',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pfKey',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'billno',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'gameCoins',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountType'])) {
        $this->accountType = $vals['accountType'];
      }
      if (isset($vals['openID'])) {
        $this->openID = $vals['openID'];
      }
      if (isset($vals['openKey'])) {
        $this->openKey = $vals['openKey'];
      }
      if (isset($vals['payToken'])) {
        $this->payToken = $vals['payToken'];
      }
      if (isset($vals['pf'])) {
        $this->pf = $vals['pf'];
      }
      if (isset($vals['pfKey'])) {
        $this->pfKey = $vals['pfKey'];
      }
      if (isset($vals['billno'])) {
        $this->billno = $vals['billno'];
      }
      if (isset($vals['gameCoins'])) {
        $this->gameCoins = $vals['gameCoins'];
      }
    }
  }

  public function getName() {
    return 'CancelPayParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->accountType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pfKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->billno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gameCoins);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CancelPayParam');
    if ($this->accountType !== null) {
      $xfer += $output->writeFieldBegin('accountType', TType::I32, 1);
      $xfer += $output->writeI32($this->accountType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openID !== null) {
      $xfer += $output->writeFieldBegin('openID', TType::STRING, 2);
      $xfer += $output->writeString($this->openID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openKey !== null) {
      $xfer += $output->writeFieldBegin('openKey', TType::STRING, 3);
      $xfer += $output->writeString($this->openKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payToken !== null) {
      $xfer += $output->writeFieldBegin('payToken', TType::STRING, 4);
      $xfer += $output->writeString($this->payToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pf !== null) {
      $xfer += $output->writeFieldBegin('pf', TType::STRING, 5);
      $xfer += $output->writeString($this->pf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pfKey !== null) {
      $xfer += $output->writeFieldBegin('pfKey', TType::STRING, 6);
      $xfer += $output->writeString($this->pfKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->billno !== null) {
      $xfer += $output->writeFieldBegin('billno', TType::STRING, 7);
      $xfer += $output->writeString($this->billno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCoins !== null) {
      $xfer += $output->writeFieldBegin('gameCoins', TType::I64, 8);
      $xfer += $output->writeI64($this->gameCoins);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


